// <auto-generated />
using System;
using DataAccess.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MoviePortalContext))]
    [Migration("20220505144029_SampleFilmsUpdated")]
    partial class SampleFilmsUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Name");

                    b.Property<string>("PhotographyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.ToTable("CreativePersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1946, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sylvester",
                            PhotographyPath = "https://i.pinimg.com/originals/be/8f/3d/be8f3dfb132eb1b867379235d75a37b1.jpg",
                            SurName = "Stallone"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1977, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom",
                            PhotographyPath = "https://i.pinimg.com/originals/9d/73/d6/9d73d68e972ef3fd416f38c780e901ff.jpg",
                            SurName = "Hardy"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1983, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris",
                            PhotographyPath = "https://i.pinimg.com/originals/13/62/b3/1362b30b97ed513559b4f28a5a3823f2.png",
                            SurName = "Hemsworth"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1976, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cillian",
                            PhotographyPath = "https://i.pinimg.com/originals/01/aa/d4/01aad42f699f2bc8d0225047e7b23e03.jpg",
                            SurName = "Murphy"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1975, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taika",
                            PhotographyPath = "https://i.pinimg.com/originals/74/e4/a5/74e4a59cb0e2a110166fd2eef714ad37.jpg",
                            SurName = "Waititi"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1931, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ted",
                            PhotographyPath = "https://tce-live2.s3.amazonaws.com/media/media/74b70c1f-c4c4-4b77-9c6f-114cb1d62fdb.jpg",
                            SurName = "Kotcheff"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christopher",
                            PhotographyPath = "https://i.pinimg.com/originals/6e/76/07/6e76076e9b218373ff054e57e6c307db.jpg",
                            SurName = "Nolan"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1969, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cate",
                            PhotographyPath = "https://i.pinimg.com/originals/d5/23/75/d52375bb559b121f8221877db8b653a8.jpg",
                            SurName = "Blanchett"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1975, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angelina",
                            PhotographyPath = "https://drive.google.com/uc?id=1B0uRX19hxh-vuDe66HTjabCeManc4nAs",
                            SurName = "Jolie"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1988, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alicia",
                            PhotographyPath = "https://drive.google.com/uc?id=1rLzH3Lwzr33LQzR3wo9k8utsxwNszW-A",
                            SurName = "Vikander"
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brad",
                            PhotographyPath = "https://drive.google.com/uc?id=1mX8nHLgNfessLVmmGJ860azAjJVi1EPq",
                            SurName = "Pitt"
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1970, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Matt",
                            PhotographyPath = "https://drive.google.com/uc?id=1l-meYLM_aRFLbNXcUms5Wns6GUOe7ifB",
                            SurName = "Damon"
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(1961, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George",
                            PhotographyPath = "https://drive.google.com/uc?id=1AKoEMsb7lQgDzcuGq2nDsTs360_PcxlI",
                            SurName = "Clooney"
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(1956, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom",
                            PhotographyPath = "https://drive.google.com/uc?id=1yuieDlNZnZaZyNiFVLX8Q2z32V7_s_Ta",
                            SurName = "Hanks"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 5,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 4,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 9,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 5,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreativePersonId");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_CreativeP_Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreativePersonId = 1,
                            MovieId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreativePersonId = 6,
                            MovieId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreativePersonId = 3,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreativePersonId = 5,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreativePersonId = 5,
                            MovieId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreativePersonId = 8,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreativePersonId = 2,
                            MovieId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreativePersonId = 4,
                            MovieId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreativePersonId = 7,
                            MovieId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeries_CreativeP_Role", b =>
                {
                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("TvSeriesId", "CreativePersonId", "RoleId");

                    b.HasIndex("CreativePersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "TvSeriesId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("TvSeries_Genre");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "action"
                        },
                        new
                        {
                            Id = 2,
                            Genre = "adventure"
                        },
                        new
                        {
                            Id = 3,
                            Genre = "animated"
                        },
                        new
                        {
                            Id = 4,
                            Genre = "comedy"
                        },
                        new
                        {
                            Id = 5,
                            Genre = "drama"
                        },
                        new
                        {
                            Id = 6,
                            Genre = "fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Genre = "historical"
                        },
                        new
                        {
                            Id = 8,
                            Genre = "horror"
                        },
                        new
                        {
                            Id = 9,
                            Genre = "sciFi"
                        },
                        new
                        {
                            Id = 10,
                            Genre = "thriller"
                        },
                        new
                        {
                            Id = 11,
                            Genre = "western"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForKids")
                        .HasColumnType("bit");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasMaxLength(2022)
                        .HasColumnType("int")
                        .HasColumnName("Release Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundPoster = "https://i.ytimg.com/vi/IAqLKlxY3Eo/maxresdefault.jpg",
                            Description = "John Rambo, były komandos, weteran wojny w Wietnamie, naraża się policjantom z pewnego miasteczka. Ci nie wiedzą, jak groźnym przeciwnikiem jest ten włóczęga.",
                            ImdbRatio = "7.7",
                            IsForKids = false,
                            PosterPath = "https://i.ebayimg.com/images/g/GB4AAOSwd1tdqF8D/s-l400.jpg",
                            ProductionYear = 1982,
                            Title = "Rambo",
                            TrailerUrl = "https://www.youtube.com/watch?v=IAqLKlxY3Eo"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundPoster = "https://c4.wallpaperflare.com/wallpaper/21/588/836/thor-ragnarok-4k-download-hd-for-desktop-wallpaper-preview.jpg",
                            Description = "Imprisoned on the planet Sakaar, Thor must race against time to return to Asgard and stop Ragnarök, the destruction of his world, at the hands of the powerful and ruthless villain Hela.",
                            ImdbRatio = "7.9",
                            IsForKids = true,
                            PosterPath = "https://preview.redd.it/hz8qlbfo4gr11.jpg?auto=webp&s=04d74ee2edec633bb566bb4801392f29fa5db299",
                            ProductionYear = 2017,
                            Title = "Thor: Ragnarok",
                            TrailerUrl = "https://www.youtube.com/watch?v=v7MGUNV8MxU"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundPoster = "https://images7.alphacoders.com/855/thumb-1920-855790.jpg",
                            Description = "Allied soldiers from Belgium, the British Commonwealth and Empire, and France are surrounded by the German Army and evacuated during a fierce battle in World War II.",
                            ImdbRatio = "7.8",
                            IsForKids = false,
                            PosterPath = "https://i.pinimg.com/originals/17/5c/e9/175ce930a9e1e42c4c0315d4933fc2d1.jpg",
                            ProductionYear = 2017,
                            Title = "Dunkirk",
                            TrailerUrl = "https://www.youtube.com/watch?v=F-eMt3SrfFU"
                        },
                        new
                        {
                            Id = 4,
                            BackgroundPoster = "",
                            Description = "Navy S.E.A.L. sniper Chris Kyle's pinpoint accuracy saves countless lives on the battlefield and turns him into a legend. Back home with his family after four tours of duty, however, Chris finds that it is the war he can't leave behind.",
                            ImdbRatio = "7.3",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1ubmorpefQEGcsXbJy97LK107JfYkCZeN",
                            ProductionYear = 2014,
                            Title = "American Sniper",
                            TrailerUrl = "https://www.youtube.com/watch?v=99k3u9ay1gs"
                        },
                        new
                        {
                            Id = 5,
                            BackgroundPoster = "",
                            Description = "The presidencies of Kennedy and Johnson, the Vietnam War, the Watergate scandal and other historical events unfold from the perspective of an Alabama man with an IQ of 75, whose only desire is to be reunited with his childhood sweetheart.",
                            ImdbRatio = "8.8",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1xwe8zw0aFAqgsaQxi_NQeUTxYLKxFGs2",
                            ProductionYear = 1994,
                            Title = "Forrest Gump",
                            TrailerUrl = "https://www.youtube.com/watch?v=bLvqoHBptjg"
                        },
                        new
                        {
                            Id = 6,
                            BackgroundPoster = "",
                            Description = "A grizzled tank commander makes tough decisions as he and his crew fight their way across Germany in April, 1945.",
                            ImdbRatio = "7.5",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=12wUK79utIGpLTOtnL3l-rMoj-C_Nv1nh",
                            ProductionYear = 2014,
                            Title = "Fury",
                            TrailerUrl = "https://www.imdb.com/video/vi1850190873?playlistId=tt2713180&ref_=tt_ov_vi"
                        },
                        new
                        {
                            Id = 7,
                            BackgroundPoster = "",
                            Description = "A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.",
                            ImdbRatio = "8.5",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1UMAYGciJObSaELHnDNCkYsDPLTJJyosp",
                            ProductionYear = 2000,
                            Title = "Gladiator",
                            TrailerUrl = "https://www.imdb.com/video/vi2628367897?playlistId=tt0172495&ref_=tt_pr_ov_vi"
                        },
                        new
                        {
                            Id = 8,
                            BackgroundPoster = "",
                            Description = "A man is picked up by a fishing boat, bullet-riddled and suffering from amnesia, before racing to elude assassins and attempting to regain his memory.",
                            ImdbRatio = "7.9",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1SoQC_cnFOZhMFg_u3H2HBEh3pISVBAYb",
                            ProductionYear = 2002,
                            Title = "The Bourne Identity",
                            TrailerUrl = "https://youtu.be/FpKaB5dvQ4g"
                        },
                        new
                        {
                            Id = 9,
                            BackgroundPoster = "",
                            Description = "When Jason Bourne is framed for a CIA operation gone awry, he is forced to resume his former life as a trained assassin to survive.",
                            ImdbRatio = "7.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1xvFGpVTZ8y4RTBbEIJ_CZWwSp3FbhPPS",
                            ProductionYear = 2017,
                            Title = "The Bourne Supremacy",
                            TrailerUrl = "https://www.youtube.com/watch?v=Y-HqyyfBbSo"
                        },
                        new
                        {
                            Id = 10,
                            BackgroundPoster = "",
                            Description = "Jason Bourne dodges a ruthless C.I.A. official and his Agents from a new assassination program while searching for the origins of his life as a trained killer.",
                            ImdbRatio = "8.0",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1MVVlgzhCRPDAnNsLRXYy46nlHrxbh1pY",
                            ProductionYear = 2007,
                            Title = "The Bourne Ultimatum",
                            TrailerUrl = "https://youtu.be/ZT2ZxjUjSo0"
                        },
                        new
                        {
                            Id = 11,
                            BackgroundPoster = "",
                            Description = "The CIA's most dangerous former operative is drawn out of hiding to uncover more explosive truths about his past.",
                            ImdbRatio = "7.8",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1sZ_4GFUctmq_VxM63zMImW2LdWTL6k4t",
                            ProductionYear = 2016,
                            Title = "Jason Bourne",
                            TrailerUrl = "https://www.imdb.com/video/vi1805498137?playlistId=tt4196776&ref_=tt_ov_vi"
                        },
                        new
                        {
                            Id = 12,
                            BackgroundPoster = "",
                            Description = "Video game adventurer Lara Croft comes to life in a movie where she races against time and villains to recover powerful ancient artifacts.",
                            ImdbRatio = "5.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1sgLLKO7Glnr9U9enAn7HjdrTAvzNFu9j",
                            ProductionYear = 2001,
                            Title = "Lara Croft Tomb Raider",
                            TrailerUrl = "https://youtu.be/VlCylyAKpGA"
                        },
                        new
                        {
                            Id = 13,
                            BackgroundPoster = "",
                            Description = "Adventurer Lara Croft goes on a quest to save the mythical Pandora's Box, before an evil scientist finds it, and recruits a former Marine turned mercenary to assist her.",
                            ImdbRatio = "5.5",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1BUuXI7WmOuoY67y-y_7Aqwmv5hU0nzP0",
                            ProductionYear = 2003,
                            Title = "Tomb Raider The Cradle of Life",
                            TrailerUrl = "https://youtu.be/G4bhBabn-wU"
                        },
                        new
                        {
                            Id = 14,
                            BackgroundPoster = "",
                            Description = "Lara Croft (Alicia Vikander), the fiercely independent daughter of a missing adventurer, must push herself beyond her limits when she discovers the island where her father, Lord Richard Croft (Dominic West) disappeared.",
                            ImdbRatio = "6.3",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1SQcvZrL7kjA7MLGfDBZl2pWaNt92I8fY",
                            ProductionYear = 2018,
                            Title = "Tomb Raider",
                            TrailerUrl = "https://youtu.be/8ndhidEmUbI"
                        },
                        new
                        {
                            Id = 15,
                            BackgroundPoster = "",
                            Description = "When a beautiful stranger leads computer hacker Neo to a forbidding underworld, he discovers the shocking truth--the life he knows is the elaborate deception of an evil cyber-intelligence.",
                            ImdbRatio = "8.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=17XIWkf4cwp7LI3Tt8qY2cUp68cymFjqj",
                            ProductionYear = 1999,
                            Title = "The Matrix",
                            TrailerUrl = "https://youtu.be/vKQi3bBA1y8"
                        },
                        new
                        {
                            Id = 16,
                            BackgroundPoster = "",
                            Description = "Freedom fighters Neo, Trinity and Morpheus continue to lead the revolt against the Machine Army, unleashing their arsenal of extraordinary skills and weaponry against the systematic forces of repression and exploitation.",
                            ImdbRatio = "7.2",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1ojvVyQAwChj5d8aMH6mZ67rxlAR8uTb3",
                            ProductionYear = 2003,
                            Title = "The Matrix Reloaded",
                            TrailerUrl = "https://youtu.be/zmYE3tg26Qc"
                        },
                        new
                        {
                            Id = 17,
                            BackgroundPoster = "",
                            Description = "The human city of Zion defends itself against the massive invasion of the machines as Neo fights to end the war at another front while also opposing the rogue Agent Smith.",
                            ImdbRatio = "6.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1d1jCZlxMP-XLHM7qAYIUkMITnz8B5SbU",
                            ProductionYear = 2003,
                            Title = "The Matrix Revolutions",
                            TrailerUrl = "https://youtu.be/hMbexEPAOQI"
                        },
                        new
                        {
                            Id = 18,
                            BackgroundPoster = "",
                            Description = "Return to a world of two realities: one, everyday life; the other, what lies behind it. To find out if his reality is a construct, to truly know himself, Mr. Anderson will have to choose to follow the white rabbit once more.",
                            ImdbRatio = "5.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1RsRaza_JC5w4_6aPl4vM3QuD-ENk4jUZ",
                            ProductionYear = 2021,
                            Title = "The Matrix Resurrections",
                            TrailerUrl = "https://youtu.be/9ix7TUGVYIo"
                        },
                        new
                        {
                            Id = 19,
                            BackgroundPoster = "",
                            Description = "A bored married couple is surprised to learn that they are both assassins hired by competing agencies to kill each other.",
                            ImdbRatio = "6.5",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1ZvEDxYPRWweYP2VQGucS1I_TJ-i_HPgn",
                            ProductionYear = 2005,
                            Title = "Mr & Mrs Smith",
                            TrailerUrl = "https://youtu.be/CZ0B22z22pI"
                        },
                        new
                        {
                            Id = 20,
                            BackgroundPoster = "",
                            Description = "Danny Ocean and his ten accomplices plan to rob three Las Vegas casinos simultaneously.",
                            ImdbRatio = "7.7",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1FW02lDizH6K5Waer9n0EDe_J8bgTIEOO",
                            ProductionYear = 2001,
                            Title = "Ocean's Eleven",
                            TrailerUrl = "https://youtu.be/imm6OR605UI"
                        },
                        new
                        {
                            Id = 21,
                            BackgroundPoster = "",
                            Description = "Daniel Ocean recruits one more team member so he can pull off three major European heists in this sequel to Ocean's Eleven (2001).",
                            ImdbRatio = "6.4",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1RiCgEjwWMsggk2FCuRC2hTZn1h48B_gT",
                            ProductionYear = 2004,
                            Title = "Ocean's Twelve",
                            TrailerUrl = "https://youtu.be/k9uhRSLMORw"
                        },
                        new
                        {
                            Id = 22,
                            BackgroundPoster = "",
                            Description = "Danny Ocean rounds up the boys for a third heist after casino owner Willy Bank double-crosses one of the original eleven, Reuben Tishkoff.",
                            ImdbRatio = "6.9",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1Zh3OFLHAh4JXMtfwmaQQQzpm9-L5-S_X",
                            ProductionYear = 2007,
                            Title = "Ocean's Thirteen",
                            TrailerUrl = "https://youtu.be/so9Eh-Guci8"
                        },
                        new
                        {
                            Id = 23,
                            BackgroundPoster = "",
                            Description = "Rambo returns to the jungles of Vietnam on a mission to infiltrate an enemy base-camp and rescue the American POWs still held captive there.",
                            ImdbRatio = "6.5",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1L-vC9i6dU_ADNykO-OOkWKwKPNc3WuCj",
                            ProductionYear = 1985,
                            Title = "Rambo II",
                            TrailerUrl = "https://youtu.be/WQGJAIYtWD4"
                        },
                        new
                        {
                            Id = 24,
                            BackgroundPoster = "",
                            Description = "Rambo mounts a one-man mission to rescue his friend Colonel Trautman from the clutches of the formidable invading Soviet forces in Afghanistan.",
                            ImdbRatio = "5.8",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1RrKOIRkqW6klpOQ1G5F-kXonXJip9v00",
                            ProductionYear = 1988,
                            Title = "Rambo III",
                            TrailerUrl = "https://youtu.be/IQt9bDOGTgg"
                        },
                        new
                        {
                            Id = 25,
                            BackgroundPoster = "",
                            Description = "The lives of guards on Death Row are affected by one of their charges: a black man accused of child murder and rape, yet who has a mysterious gift.",
                            ImdbRatio = "8.6",
                            IsForKids = false,
                            PosterPath = "https://drive.google.com/uc?id=1ixqYqYP1cJ8WePqcvEc46uku-dbbwrzp",
                            ProductionYear = 1999,
                            Title = "The Green Mile",
                            TrailerUrl = "https://youtu.be/Ki4haFrqSrw"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Actor"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Director"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<int>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("End_Year");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("Start_Year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.RoleModel", "Role")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Movie");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeries_CreativeP_Role", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.RoleModel", "Role")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Role");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.HasOne("DataAccess.Models.SeasonModel", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Navigation("RoleCreativeMovie");

                    b.Navigation("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSeriesGenres");
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("RoleCreativeMovie");
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Navigation("RoleCreativeMovie");

                    b.Navigation("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSeriesGenres");

                    b.Navigation("TvSeries_CreativeP_Role");
                });
#pragma warning restore 612, 618
        }
    }
}
