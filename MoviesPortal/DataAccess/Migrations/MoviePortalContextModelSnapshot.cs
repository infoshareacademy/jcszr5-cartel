// <auto-generated />
using System;
using DataAccess.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MoviePortalContext))]
    partial class MoviePortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Name");

                    b.Property<string>("PhotographyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.ToTable("CreativePersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1946, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sylvester",
                            PhotographyPath = "https://i.pinimg.com/originals/be/8f/3d/be8f3dfb132eb1b867379235d75a37b1.jpg",
                            SurName = "Stallone"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1977, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom",
                            PhotographyPath = "https://i.pinimg.com/originals/9d/73/d6/9d73d68e972ef3fd416f38c780e901ff.jpg",
                            SurName = "Hardy"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1983, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris",
                            PhotographyPath = "https://i.pinimg.com/originals/13/62/b3/1362b30b97ed513559b4f28a5a3823f2.png",
                            SurName = "Hemsworth"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1976, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cillian",
                            PhotographyPath = "https://i.pinimg.com/originals/01/aa/d4/01aad42f699f2bc8d0225047e7b23e03.jpg",
                            SurName = "Murphy"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1975, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taika",
                            PhotographyPath = "https://i.pinimg.com/originals/74/e4/a5/74e4a59cb0e2a110166fd2eef714ad37.jpg",
                            SurName = "Waititi"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1931, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ted",
                            PhotographyPath = "https://tce-live2.s3.amazonaws.com/media/media/74b70c1f-c4c4-4b77-9c6f-114cb1d62fdb.jpg",
                            SurName = "Kotcheff"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christopher",
                            PhotographyPath = "https://i.pinimg.com/originals/6e/76/07/6e76076e9b218373ff054e57e6c307db.jpg",
                            SurName = "Nolan"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1969, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cate",
                            PhotographyPath = "https://i.pinimg.com/originals/d5/23/75/d52375bb559b121f8221877db8b653a8.jpg",
                            SurName = "Blanchett"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 5,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 4,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 9,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 5,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreativePersonId");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_CreativeP_Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreativePersonId = 1,
                            MovieId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreativePersonId = 6,
                            MovieId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreativePersonId = 3,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreativePersonId = 5,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreativePersonId = 5,
                            MovieId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreativePersonId = 8,
                            MovieId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreativePersonId = 2,
                            MovieId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreativePersonId = 4,
                            MovieId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreativePersonId = 7,
                            MovieId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeries_CreativeP_Role", b =>
                {
                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("TvSeriesId", "CreativePersonId", "RoleId");

                    b.HasIndex("CreativePersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "TvSeriesId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("TvSeries_Genre");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.UserFavourities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("TvSeriesId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvSeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavourities");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "action"
                        },
                        new
                        {
                            Id = 2,
                            Genre = "adventure"
                        },
                        new
                        {
                            Id = 3,
                            Genre = "animated"
                        },
                        new
                        {
                            Id = 4,
                            Genre = "comedy"
                        },
                        new
                        {
                            Id = 5,
                            Genre = "drama"
                        },
                        new
                        {
                            Id = 6,
                            Genre = "fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Genre = "historical"
                        },
                        new
                        {
                            Id = 8,
                            Genre = "horror"
                        },
                        new
                        {
                            Id = 9,
                            Genre = "sciFi"
                        },
                        new
                        {
                            Id = 10,
                            Genre = "thriller"
                        },
                        new
                        {
                            Id = 11,
                            Genre = "western"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForKids")
                        .HasColumnType("bit");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasMaxLength(2022)
                        .HasColumnType("int")
                        .HasColumnName("Release Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundPoster = "https://i.ytimg.com/vi/IAqLKlxY3Eo/maxresdefault.jpg",
                            Description = "John Rambo, były komandos, weteran wojny w Wietnamie, naraża się policjantom z pewnego miasteczka. Ci nie wiedzą, jak groźnym przeciwnikiem jest ten włóczęga.",
                            ImdbRatio = "7.7",
                            IsForKids = false,
                            PosterPath = "https://i.ebayimg.com/images/g/GB4AAOSwd1tdqF8D/s-l400.jpg",
                            ProductionYear = 1982,
                            Title = "Rambo",
                            TrailerUrl = "https://www.youtube.com/watch?v=IAqLKlxY3Eo"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundPoster = "https://c4.wallpaperflare.com/wallpaper/21/588/836/thor-ragnarok-4k-download-hd-for-desktop-wallpaper-preview.jpg",
                            Description = "Imprisoned on the planet Sakaar, Thor must race against time to return to Asgard and stop Ragnarök, the destruction of his world, at the hands of the powerful and ruthless villain Hela.",
                            ImdbRatio = "7.9",
                            IsForKids = true,
                            PosterPath = "https://preview.redd.it/hz8qlbfo4gr11.jpg?auto=webp&s=04d74ee2edec633bb566bb4801392f29fa5db299",
                            ProductionYear = 2017,
                            Title = "Thor: Ragnarok",
                            TrailerUrl = "https://www.youtube.com/watch?v=v7MGUNV8MxU"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundPoster = "https://images7.alphacoders.com/855/thumb-1920-855790.jpg",
                            Description = "Allied soldiers from Belgium, the British Commonwealth and Empire, and France are surrounded by the German Army and evacuated during a fierce battle in World War II.",
                            ImdbRatio = "7.8",
                            IsForKids = false,
                            PosterPath = "https://i.pinimg.com/originals/17/5c/e9/175ce930a9e1e42c4c0315d4933fc2d1.jpg",
                            ProductionYear = 2017,
                            Title = "Dunkirk",
                            TrailerUrl = "https://www.youtube.com/watch?v=F-eMt3SrfFU"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Actor"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Director"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<int>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("End_Year");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("Start_Year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvSeries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.RoleModel", "Role")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Movie");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeries_CreativeP_Role", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.RoleModel", "Role")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeries_CreativeP_Role")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Role");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.UserFavourities", b =>
                {
                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("UserFavourities")
                        .HasForeignKey("MovieId");

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("UserFavourities")
                        .HasForeignKey("TvSeriesId");

                    b.HasOne("DataAccess.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserFavourities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Movie");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.HasOne("DataAccess.Models.SeasonModel", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserFavourities");
                });

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Navigation("RoleCreativeMovie");

                    b.Navigation("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSeriesGenres");
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("RoleCreativeMovie");

                    b.Navigation("UserFavourities");
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Navigation("RoleCreativeMovie");

                    b.Navigation("TvSeries_CreativeP_Role");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSeriesGenres");

                    b.Navigation("TvSeries_CreativeP_Role");

                    b.Navigation("UserFavourities");
                });
#pragma warning restore 612, 618
        }
    }
}
