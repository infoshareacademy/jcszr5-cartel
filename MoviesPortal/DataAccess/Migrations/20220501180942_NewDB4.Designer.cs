// <auto-generated />
using System;
using DataAccess.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MoviePortalContext))]
    [Migration("20220501180942_NewDB4")]
    partial class NewDB4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Name");

                    b.Property<string>("PhotographyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.ToTable("CreativePersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sylvester",
                            SurName = "Stallone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ted",
                            SurName = "Kotcheff"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieCreativePerson", b =>
                {
                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CreativePersonId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_CreativePerson");

                    b.HasData(
                        new
                        {
                            CreativePersonId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            CreativePersonId = 2,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("Movie_Genre");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CreativePersonId", "RoleId");

                    b.HasIndex("MovieId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_CreativeP_Movie");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesCreativePerson", b =>
                {
                    b.Property<int>("CreativePersonId")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("CreativePersonId", "TvSeriesId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("TvSeries_CreativePerson");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "TvSeriesId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("TvSeries_Genre");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Description");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "action"
                        },
                        new
                        {
                            Id = 2,
                            Genre = "adventure"
                        },
                        new
                        {
                            Id = 3,
                            Genre = "animated"
                        },
                        new
                        {
                            Id = 4,
                            Genre = "comedy"
                        },
                        new
                        {
                            Id = 5,
                            Genre = "drama"
                        },
                        new
                        {
                            Id = 6,
                            Genre = "fantasy"
                        },
                        new
                        {
                            Id = 7,
                            Genre = "historical"
                        },
                        new
                        {
                            Id = 8,
                            Genre = "horror"
                        },
                        new
                        {
                            Id = 9,
                            Genre = "sciFi"
                        },
                        new
                        {
                            Id = 10,
                            Genre = "thriller"
                        },
                        new
                        {
                            Id = 11,
                            Genre = "western"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Id");

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForKids")
                        .HasColumnType("bit");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasMaxLength(2022)
                        .HasColumnType("int")
                        .HasColumnName("Release Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "John Rambo, były komandos, weteran wojny w Wietnamie, naraża się policjantom z pewnego miasteczka. Ci nie wiedzą, jak groźnym przeciwnikiem jest ten włóczęga.",
                            IsForKids = false,
                            PosterPath = "https://i.ebayimg.com/images/g/GB4AAOSwd1tdqF8D/s-l400.jpg",
                            ProductionYear = 1982,
                            Title = "Rambo"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Actor"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Director"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BackgroundPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("Nie dodano jeszcze żadnego opisu.");

                    b.Property<int>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("End_Year");

                    b.Property<string>("ImdbRatio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("Start_Year");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieCreativePerson", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("MovieCreativePersons")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("MovieCreativePersons")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.MovieGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.RoleCreativeMovie", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("RoleCreativePersons")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.MovieModel", "Movie")
                        .WithMany("RoleCreativeMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.RoleModel", "Role")
                        .WithMany("RoleCreativePersons")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("Movie");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesCreativePerson", b =>
                {
                    b.HasOne("DataAccess.Models.CreativePersonModel", "CreativePerson")
                        .WithMany("TvSeriesCreativePersons")
                        .HasForeignKey("CreativePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeriesCreativePersons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreativePerson");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EntityAssigments.TvSeriesGenre", b =>
                {
                    b.HasOne("DataAccess.Models.GenreModel", "Genre")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("TvSeriesGenres")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.EpisodeModel", b =>
                {
                    b.HasOne("DataAccess.Models.SeasonModel", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.HasOne("DataAccess.Models.TvSeriesModel", "TvSeries")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("DataAccess.Models.CreativePersonModel", b =>
                {
                    b.Navigation("MovieCreativePersons");

                    b.Navigation("RoleCreativePersons");

                    b.Navigation("TvSeriesCreativePersons");
                });

            modelBuilder.Entity("DataAccess.Models.GenreModel", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvSeriesGenres");
                });

            modelBuilder.Entity("DataAccess.Models.MovieModel", b =>
                {
                    b.Navigation("MovieCreativePersons");

                    b.Navigation("MovieGenres");

                    b.Navigation("RoleCreativeMovie");
                });

            modelBuilder.Entity("DataAccess.Models.RoleModel", b =>
                {
                    b.Navigation("RoleCreativePersons");
                });

            modelBuilder.Entity("DataAccess.Models.SeasonModel", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DataAccess.Models.TvSeriesModel", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("TvSeriesCreativePersons");

                    b.Navigation("TvSeriesGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
